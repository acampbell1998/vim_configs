snippet beg "begin{} / end{}" b
\begin{$1}
  $0
\end{$1}
endsnippet

snippet mk "inline math" w
$${1}$`!p
if t[2] and t[2][0] not in ['.',',','-','?',' ']:
	snip.rv = ' '
else
	snip.rv = ''
`$2
endsnippet

snippet dm "display math" b
/[
$1
./] $0
endsnippet

global !p
def create_case_placeholders(snip):
	anon_snippet_body = ""
	start = snip.snippet_start[0]
	end = snip.snippet_end[0]
	for i in range(start, end+1):
		anon_snippet_body += snip.buffer[i]
		anon_snippet_body += "" if i==end else "\n"
	for i in range(start, end):
		del snip.buffer[start]	
	snip.buffer[start] = ''
	snip.expand_anon(anon_snippet_body)

def create_case(rows):
	res = "\\begin{cases}\n"
	placeholder = 1
	for _ in range(0, int(rows)):
		res += "\t${{{}}},& ${{{}}}\\\\\\\\\n".format(placeholder, placeholder+1)
		placeholder += 2
	res += "\\end{cases}\n"
	return res[:-1]

def create_matrix_placeholders(snip):
	anon_snippet_body = ""
	start = snip.snippet_start[0]
	end = snip.snippet_end[0]
	for i in range(start, end + 1):
		anon_snippet_body += snip.buffer[i]
		anon_snippet_body += "" if i==end else "\n"
	for i in range(start, end):
		del snip.buffer[start]
	snip.buffer[start] = ''
	snip.expand_anon(anon_snippet_body)

def create_matrix(cols, rows, sep, start, end):
	res = ""
	placeholder = 1
	for _ in range(0, int(rows)):
		res += start + f"${placeholder} "
		placeholder += 1
		for _ in range(0, int(cols)-1):
			res += sep + f" ${placeholder} "
			placeholder += 1
		res += end
	return res[:-1]
endglobal

post_jump "create_case_placeholders(snip)"
snippet "cases(\d+)" "conditional braces" br
	`!p snip.rv = create_case(match.group(1))`$0
endsnippet

post_jump "create_matrix_placeholders(snip)"
snippet "arr(\d+),(\d+)" "latex array" br
\begin{array}{`!p
orient = ""
for _ in range(0, int(match.group(2))): orient += "l"
snip.rv = orient`}
`!p
snip.rv = create_matrix(int(match.group(2)), int(match.group(1)), "&", "\t", "\\\\\\\\\n")
`$0
\end{array}
endsnippet
